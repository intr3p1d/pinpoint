<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.navercorp.pinpoint.exceptiontrace.web.dao.PinotExceptionTraceDao">
    <resultMap id="exceptionMetaDataEntity" type="ExceptionMetaDataEntity">
    </resultMap>

    <resultMap id="exceptionTraceSummaryEntity" type="ExceptionTraceSummaryEntity">
    </resultMap>

    <resultMap id="exceptionTraceValueViewEntity" type="ExceptionTraceValueViewEntity">
    </resultMap>

    <resultMap id="clpConvertedEntity" type="ClpConvertedEntity">
    </resultMap>

    <sql id="exceptionTraceTable">${tableName}</sql>

    <sql id="allGroupByAttributes">
        <foreach collection="groupByAttributes" item="attr" open="" close="" separator=", ">
            <foreach collection="attr.getGroupByColumns" item="column" open="" close="" separator=", ">
                ${column}
            </foreach>
        </foreach>
    </sql>

    <sql id="filterByGivenColumnsAndValue">
        <foreach collection="filterByAttributes.getMap()" item="value" index="key" separator="">
            AND ${key.column.name}=#{value}
        </foreach>
    </sql>

    <sql id="getGroupedFieldNameEntity">
        <choose>
            <when test="!groupByAttributes.isEmpty()">
                <foreach collection="groupByAttributes" item="attr" open="" close="" separator=", ">
                    ${attr.getRepresentativeColumn}
                </foreach>
                ,
            </when>
            <otherwise>
            </otherwise>
        </choose>
    </sql>

    <sql id="groupByAllAttributes">
        <choose>
            <when test="!groupByAttributes.isEmpty()">
                ,
                <include refid="allGroupByAttributes"/>
            </when>
            <otherwise>
            </otherwise>
        </choose>
    </sql>

    <sql id="getErrorMessage">
        CLPDECODE
        (errorMessage_logtype, errorMessage_dictionaryVars, errorMessage_encodedVars)
    </sql>

    <sql id="fullExceptionColumns">
        DATETIME_CONVERT
        ("timestamp", '1:MILLISECONDS:EPOCH', '1:MILLISECONDS:EPOCH',
        '#{timePrecision.timeSize}:${timePrecision.timeUnit}') as "timestamp",
        transactionId,
        spanId,
        exceptionId,
        applicationServiceType,
        applicationName,
        agentId,
        uriTemplate,
        errorClassName,
        <include refid="getErrorMessage"/>
        as "errorMessage",
        exceptionDepth,
        stackTraceClassName,
        stackTraceFileName,
        stackTraceLineNumber,
        stackTraceMethodName,
        stackTraceHash
    </sql>

    <sql id="summarizedExceptionColumns">
        DATETIME_CONVERT
        ("timestamp", '1:MILLISECONDS:EPOCH', '1:MILLISECONDS:EPOCH',
        '#{timePrecision.timeSize}:${timePrecision.timeUnit}') as "timestamp",
        transactionId,
        spanId,
        exceptionId,
        applicationServiceType,
        applicationName,
        agentId,
        uriTemplate,
        errorClassName,
        <include refid="getErrorMessage"/>
        as "errorMessage",
        exceptionDepth,
        stackTraceHash
    </sql>

    <select id="selectExceptions" resultMap="exceptionMetaDataEntity"
            parameterType="ExceptionTraceQueryParameter">
        SELECT
        <include refid="fullExceptionColumns"/>
        FROM
        <include refid="exceptionTraceTable"/>
        WHERE
        tenantId = #{tenantId}
        AND applicationName = #{applicationName}
        <if test="range != null">
            AND "timestamp" BETWEEN #{range.from} AND #{range.to}
        </if>
        <if test="agentId != null">
            AND agentId = #{agentId}
        </if>
        <if test="transactionId != null">
            AND transactionId = #{transactionId}
            AND spanId = #{spanId}
            AND exceptionId = #{exceptionId}
        </if>
        ORDER BY "timestamp" asc, exceptionDepth asc
        LIMIT ${limit}
    </select>

    <select id="selectSummarizedExceptions" resultMap="exceptionMetaDataEntity"
            parameterType="ExceptionTraceQueryParameter">
        SELECT
        <include refid="summarizedExceptionColumns"/>
        FROM
        <include refid="exceptionTraceTable"/>
        WHERE
        tenantId = #{tenantId}
        AND applicationName = #{applicationName}
        <if test="range != null">
            AND "timestamp" BETWEEN #{range.from} AND #{range.to}
        </if>
        <if test="agentId != null">
            AND agentId = #{agentId}
        </if>
        <include refid="filterByGivenColumnsAndValue"/>
        ORDER BY ${orderBy.getAttributeName} ${isDesc}
        LIMIT ${limit}
    </select>

    <select id="selectExactException" resultMap="exceptionMetaDataEntity"
            parameterType="ExceptionTraceQueryParameter">
        SELECT
        <include refid="summarizedExceptionColumns"/>
        FROM
        <include refid="exceptionTraceTable"/>
        WHERE
        tenantId = #{tenantId}
        AND applicationName = #{applicationName}
        <if test="agentId != null">
            AND agentId = #{agentId}
        </if>
        <if test="transactionId != null">
            AND transactionId = #{transactionId}
            AND spanId = #{spanId}
            AND exceptionId = #{exceptionId}
            AND exceptionDepth = #{exceptionDepth}
        </if>
        ORDER BY "timestamp" asc
        LIMIT ${limit}
    </select>

    <select id="selectSummaries" resultMap="exceptionTraceSummaryEntity"
            parameterType="ExceptionTraceQueryParameter">
        SELECT
        <include refid="getGroupedFieldNameEntity"/>
        LASTWITHTIME(errorClassName, "timestamp", 'STRING') as "mostRecentErrorClass",
        LASTWITHTIME(
        <include refid="getErrorMessage"/>,
        "timestamp", 'STRING') as "mostRecentErrorMessage",
        count(*) as "count",
        FIRSTWITHTIME("timestamp", "timestamp", 'LONG') as "firstOccurred",
        LASTWITHTIME("timestamp", "timestamp", 'LONG') as "lastOccurred"

        FROM
        <include refid="exceptionTraceTable"/>

        WHERE
        tenantId = #{tenantId}
        AND applicationName = #{applicationName}
        AND "timestamp" BETWEEN #{range.from} AND #{range.to}
        <if test="agentId != null">
            AND agentId = #{agentId}
        </if>
        GROUP BY applicationName
        <include refid="groupByAllAttributes"/>
        ORDER BY count(*) desc
        LIMIT 10
    </select>

    <select id="selectValueViews" resultMap="exceptionTraceValueViewEntity"
            parameterType="ExceptionTraceQueryParameter">
        SELECT
        <include refid="getGroupedFieldNameEntity"/>
        arraySliceInt(
        HISTOGRAM("timestamp", #{range.from}, #{range.to}, #{timeWindowRangeCount}), 0, #{timeWindowRangeCount}
        ) as "values"

        FROM
        <include refid="exceptionTraceTable"/>
        WHERE
        tenantId = #{tenantId}
        AND applicationName = #{applicationName}
        AND "timestamp" BETWEEN #{range.from} AND #{range.to}
        <if test="agentId != null">
            AND agentId = #{agentId}
        </if>
        GROUP BY applicationName
        <include refid="groupByAllAttributes"/>
        ORDER BY count(*) desc
        LIMIT 10
    </select>

    <select id="selectClpVariables" resultMap="clpConvertedEntity"
            parameterType="ClpQueryParameter">
        SELECT
        arraySliceInt(${targetColumn}, #{targetIndex}, #{targetIndex} + 1) as "replacedToken",
        count(*) as "count"
        FROM
        <include refid="exceptionTraceTable"/>
        WHERE
        tenantId = #{tenantId}
        AND applicationName = #{applicationName}
        AND "timestamp" BETWEEN #{range.from} AND #{range.to}
        <if test="agentId != null">
            AND agentId = #{agentId}
        </if>
        AND errorMessage_logtype = #{logType}
        GROUP BY arraySliceInt(${targetColumn}, #{targetIndex}, #{targetIndex} + 1)
        ORDER BY "count" desc
        LIMIT 100
    </select>

</mapper>